services:
  postgres:
    image: postgis/postgis:16-3.4-alpine
    container_name: postgres
    ports:
      - "5433:5432"
    env_file:
      - docker/.env
    networks:
      - vou-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data

  mongo:
    image: mongodb/mongodb-community-server
    container_name: mongo
    ports:
      - "27017:27017"
    env_file:
      - docker/.env
    networks:
      - vou-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh admin -u $MONGODB_INITDB_ROOT_USERNAME -p $MONGODB_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 5s
      retries: 5
    command: mongod --quiet --logpath /dev/null 

  node_modules:
    build:
      context: .
      dockerfile: docker/Dockerfile.node_modules
    container_name: node_modules
    networks:
      - vou-network

  migration:
    build:
      context: .
      dockerfile: docker/Dockerfile.migration
    container_name: migration
    env_file:
      - docker/.env
    networks:
      - vou-network
    depends_on:
      postgres:
        condition: service_healthy
      node_modules:
        condition: service_completed_successfully

  rabbitmq:
    build:
      context: .
      dockerfile: docker/Dockerfile.rabbitmq
    container_name: rabbitmq-vou
    networks:
      - vou-network
    env_file:
      - docker/.env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  redis:
    image: redis:6
    container_name: redis
    networks:
      - vou-network
    env_file:
      - docker/.env
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  main-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE_NAME: main-api
        STAGE: dev
    ports:
      - "${MAIN_API_PORT}:${MAIN_API_PORT}"
    env_file:
      - ./apps/main-api/.env.build
    container_name: main-api
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - vou-network

  account-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE_NAME: account-service
        STAGE: dev
    ports:
      - "${ACCOUNT_SERVICE_PORT}:${ACCOUNT_SERVICE_PORT}"
    env_file:
      - ./apps/account-service/.env.build
    container_name: account-service
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - vou-network

  event-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE_NAME: event-service
        STAGE: dev
    ports:
      - "${EVENT_SERVICE_PORT}:${EVENT_SERVICE_PORT}"
    env_file:
      - ./apps/event-service/.env.build
    container_name: event-service
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - vou-network

  bucket-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE_NAME: bucket-service
        STAGE: dev
    ports:
      - "${BUCKET_SERVICE_PORT}:${BUCKET_SERVICE_PORT}"
    env_file:
      - ./apps/bucket-service/.env.build
    container_name: bucket-service
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - vou-network

  voucher-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE_NAME: voucher-service
        STAGE: dev
    ports:
      - "${VOUCHER_SERVICE_PORT}:${VOUCHER_SERVICE_PORT}"
    env_file:
      - ./apps/voucher-service/.env.build
    container_name: voucher-service
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - vou-network

  item-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE_NAME: item-service
        STAGE: dev
    ports:
      - "${ITEM_SERVICE_PORT}:${ITEM_SERVICE_PORT}"
    env_file:
      - ./apps/item-service/.env.build
    container_name: item-service
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - vou-network

  notification-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.service
      args:
        SERVICE_NAME: notification-service
        STAGE: dev
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    env_file:
      - ./apps/notification-service/.env.build
    container_name: notification-service
    depends_on:
      postgres:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    networks:
      - vou-network

volumes:
  postgres-data:
  rabbitmq-data:
  redis-data:

networks:
  vou-network:
    driver: bridge
